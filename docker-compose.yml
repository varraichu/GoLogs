services:
  # Combined app and fluent-bit container
  postgres:
    image: postgres:15-alpine
    container_name: postgres-db
    env_file:
      - .env
    environment:
      - POSTGRES_USER
      - POSTGRES_PASSWORD
      - POSTGRES_DB
    volumes:
      - pgdata:/var/lib/postgresql/data
      - ./demo-app/postgres-init:/docker-entrypoint-initdb.d
    restart: unless-stopped
    networks:
      - logging_net
    ports:
      - "5432:5432"

  poller:
    build:
      context: .
      dockerfile: log-collector/Dockerfile.combined
    container_name: poller
    env_file:
      - .env
    environment:
      - POSTGRES_HOST
      - POSTGRES_USER
      - POSTGRES_PASSWORD
      - POSTGRES_DB
    command: ["node", "polling-script.js"]
    volumes:
      - poller-logs:/demo-app/src/shared-logs
    depends_on:
      - postgres
    networks:
      - logging_net
  
  app-fluent:
    build:
      context: .  # Build from root directory to access both demo-app and log-collector
      dockerfile: log-collector/Dockerfile.combined
    container_name: app-fluent
    volumes:
      # Persistent buffering for fluent-bit
      - fluent-db-app1:/fluent-bit/db
      - flb-storage1:/tmp/flb-storage
      - app1-logs:/demo-app/src/logs
      - poller-logs:/demo-app/src/shared-logs
    depends_on:
      - redis
      - postgres
    env_file:
      - .env
    environment:
    - POSTGRES_HOST
    - POSTGRES_USER
    - POSTGRES_PASSWORD
    - POSTGRES_DB
    - APP_NAME=${APP1_NAME}
    - LOG_COUNT=${LOG_COUNT1}
    restart: unless-stopped
    networks:
      - logging_net
    ports:
      - "2020:2020"

  app-fluent2:
    build:
      context: .  # Build from root directory to access both demo-app and log-collector
      dockerfile: log-collector/Dockerfile.combined
    container_name: app-fluent2
    volumes:
      # Persistent buffering for fluent-bit
      - fluent-db-app2:/fluent-bit/db
      - flb-storage2:/tmp/flb-storage
      - app2-logs:/demo-app/src/logs
      - poller-logs:/demo-app/src/shared-logs
    depends_on:
      - redis
      - postgres
    env_file:
      - .env
    environment:
    - POSTGRES_HOST
    - POSTGRES_USER
    - POSTGRES_PASSWORD
    - POSTGRES_DB
    - APP_NAME=${APP2_NAME}
    - LOG_COUNT=${LOG_COUNT2}
    restart: unless-stopped
    networks:
      - logging_net
    ports:
      - "2022:2020"
  app-fluent3:
    build:
      context: .  # Build from root directory to access both demo-app and log-collector
      dockerfile: log-collector/Dockerfile.combined
    container_name: app-fluent3
    volumes:
      # Persistent buffering for fluent-bit
      - fluent-db-app3:/fluent-bit/db
      - flb-storage3:/tmp/flb-storage
      - app3-logs:/demo-app/src/logs
      - poller-logs:/demo-app/src/shared-logs
    depends_on:
      - redis
      - postgres
    env_file:
      - .env
    environment:
    - POSTGRES_HOST
    - POSTGRES_USER
    - POSTGRES_PASSWORD
    - POSTGRES_DB
    - APP_NAME=${APP3_NAME}
    - LOG_COUNT=${LOG_COUNT3}
    restart: unless-stopped
    networks:
      - logging_net
    ports:
      - "2025:2020"

  redis:
    build: 
      context: ./redis
      dockerfile: Dockerfile
    container_name: redis-server
    ports:
      - "6379:6379"  # Expose Redis on default port
    volumes:
      - redis-data:/data
    restart: unless-stopped
    networks:
      - logging_net
  
 

  bridge:
    build:
      context: ./bridge
    container_name: bridge
    depends_on:
      - redis
    env_file:
      - .env
    environment:
      - REDIS_HOST
    networks:
      - logging_net   
      
  worker:
    build:
      context: ./log-parser
    container_name: worker
    env_file:
      - .env
    environment:
      - REDIS_HOST
      - APP_NAME
      - MONGODB_URI
    volumes:
      - ./logs:/app/logs   # To persist the processed_logs.log
    depends_on:
      - redis
    networks:
      - logging_net

  # frontend:
  #   build: ./frontend
  #   container_name: frontend
  #   ports:
  #     - "8000:8000"               
  #   volumes:
  #     - ./frontend:/app
  #     - /app/node_modules         
  #   # command: npm run dev -- --host
  #   depends_on:
  #     - backend
  #   #   - worker
  #   networks:
  #     - logging_net

  # backend:
  #   build: ./backend
  #   container_name: backend
  #   env_file:
  #     - ./backend/.env
  #   volumes:
  #     - ./backend:/app
  #     - /app/node_modules     
  #   ports:
  #     - "3001:3001"
  #   # depends_on:
  #   #   - worker
  #   networks:
  #     - logging_net
  #   dns:
  #     - 8.8.8.8


volumes:
  pgdata:  # Persistent volume for PostgreSQL data
  redis-data:
  app-logs:  # Internal volume for app logs
  fluent-db-app1:
  fluent-db-app2:
  fluent-db-app3:
  app1-logs:        
  app2-logs:        
  app3-logs:        
  flb-storage1:     
  flb-storage2:     
  flb-storage3:   
  poller-logs:

networks:
  logging_net:
    driver: bridge